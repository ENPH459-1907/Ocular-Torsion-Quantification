GIT CHEAT SHEET

# check current status of branch
git status

- will tell you which files have or haven't been added / commited
- always run this before commiting to make sure you aren't commiting random crap

# save unstaged changes
git add .

# commit
git commit -m ""

# push changes
git push OR git push origin <branch_name>

- ex. git push origin master
- origin is the location of the remote git repo

# list all the branches
git branch

# create a new branch
git checkout -B <branch_name>

- this will move all unstaged changes to this branch (stuff that hasn't been added)

# move to a new branch
git checkout <branch_name>

# creating a remote branch from a local branch
git push --set-upstream origin <branch_name>

# getting remote branches
git fetch

# to merge files from a different branch to the current branch
git merge <different_branch_name>

- ex. if I want all the changes from develop to go to master (after I've commited files on develop), git checkout master, git merge develop
- can think of it as git merge OTHER to CURRENT

# roll back changes that have been commited
git reset HEAD~1

- this will only move back one commit, you can move back more be specificing a larger number

NEW FEATURE / BRANCH WORKFLOW

To reduce merge conflicts and prevent random things from breaking we will use this workflow:

On branch "develop" type "git checkout -B feature/name"
You will be moved to a new branch "feature/name"
Make changes and commit
OPTIONAL: With large features you may want to push "git push --set-upstream origin feature/name"
You can either use git merge or a pull request (PR), PRs are handled in bitbucket through the UI and better at handling merge conflicts (you must push for this to work)
MERGE: Move to develop "git checkout develop" then type "git merge feature/name". You may get merge conflicts.
Merge conflicts can be handled locally, type "git status" to see the files where there is a merging issue and make the changes manually the commit the merge

GITIGNORE

look at the .gitignore file, we use this to ignore random files that are usually autoegenerated by programs or python
